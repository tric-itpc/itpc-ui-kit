"use strict";(self.webpackChunkitpc_ui_kit=self.webpackChunkitpc_ui_kit||[]).push([[833],{"./src/components/form/Form.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Large:()=>Large,Medium:()=>Medium,Small:()=>Small,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Form_stories});var react=__webpack_require__("./node_modules/react/index.js"),Button=__webpack_require__("./src/components/buttons/Button/index.tsx"),Checkbox=__webpack_require__("./src/components/inputs/Checkbox/index.tsx"),DatePicker=__webpack_require__("./src/components/inputs/DatePicker/index.tsx"),NumberField=__webpack_require__("./src/components/inputs/NumberField/index.tsx"),SelectField=__webpack_require__("./src/components/inputs/SelectField/index.tsx"),TextField=__webpack_require__("./src/components/inputs/TextField/index.tsx"),Flex=__webpack_require__("./src/components/layout/Flex/index.tsx");const FormContext=(0,react.createContext)(null),componentMap={Checkbox:{getValueFromEvent:e=>e?.target?.checked,valuePropName:"isChecked"},DatePicker:{getValueFromEvent:v=>v?.value,valuePropName:"value"},DecimalField:{getValueFromEvent:v=>v?.value,valuePropName:"value"},MultiSelectField:{getValueFromEvent:v=>v,valuePropName:"value"},NumberField:{getValueFromEvent:v=>v?.value,valuePropName:"value"},SearchField:{getValueFromEvent:e=>e?.target?.value,valuePropName:"value"},SelectField:{getValueFromEvent:v=>v,valuePropName:"value"},TextAreaField:{getValueFromEvent:e=>e?.target?.value,valuePropName:"value"},TextField:{getValueFromEvent:(v,e)=>v,valuePropName:"value"}},useForm=()=>{const[,forceUpdate]=(0,react.useState)({}),fieldsRef=(0,react.useRef)({}),errorsRef=(0,react.useRef)({}),registerField=(0,react.useCallback)((field=>{fieldsRef.current[field.name]=field}),[]),unregisterField=(0,react.useCallback)((name=>{delete fieldsRef.current[name],delete errorsRef.current[name]}),[]),getFieldsValue=(0,react.useCallback)((()=>{const result={};return Object.keys(fieldsRef.current).forEach((key=>{result[key]=fieldsRef.current[key].value})),result}),[]),getFieldValue=(0,react.useCallback)((name=>fieldsRef.current[name]?.value),[]),setFieldsValue=(0,react.useCallback)((values=>{let count=0;Object.keys(fieldsRef.current).forEach((key=>{void 0!==values[key]&&(fieldsRef.current[key]=values[key],count++)})),count>0&&forceUpdate({})}),[]),setFieldValue=(0,react.useCallback)(((name,value)=>{fieldsRef.current[name]&&(fieldsRef.current[name].value=value,forceUpdate({}))}),[]),getFieldsError=(0,react.useCallback)((()=>{const errors={};return Object.keys(errorsRef.current).forEach((key=>{errors[key]=errorsRef.current[key]})),errors}),[]),getFieldError=(0,react.useCallback)((name=>errorsRef.current[name]||[]),[]),validateField=(0,react.useCallback)((name=>{const field=fieldsRef.current[name],value=field?.value,errors=[];if(field?.rules)for(const rule of field.rules)if(!rule.required||null!=value&&""!==value){if("function"==typeof rule.validator){const error=rule.validator(value);null!==error&&"boolean"!=typeof error&&errors.push(error)}}else errors.push({message:rule.message||"Обязательное поле"});return errorsRef.current[name]=errors,{errors,isValid:0===errors.length}}),[]),validateFields=(0,react.useCallback)((()=>{let isValid=!0;return Object.keys(fieldsRef.current).forEach((name=>{validateField(name).isValid||(isValid=!1)})),forceUpdate({}),isValid}),[validateField]);return{getFieldError,getFieldsError,getFieldsValue,getFieldValue,registerField,setFieldsValue,setFieldValue,unregisterField,validateField,validateFields}},Form=({children,className,form,initialValues,onFailure,onFinish})=>{const internalForm=useForm(),contextValue=form||internalForm;return(0,react.useEffect)((()=>{initialValues&&contextValue.setFieldsValue(initialValues)}),[]),react.createElement(FormContext.Provider,{value:contextValue},react.createElement("form",{className,onSubmit:e=>{e.preventDefault();const isValid=contextValue.validateFields();if(isValid&&onFinish){const values=contextValue.getFieldsValue();onFinish(values)}if(!isValid&&onFailure){const errors=contextValue.getFieldsError();onFailure(errors)}}},children))};Form.__docgenInfo={description:"",methods:[],displayName:"Form",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Дочерние элементы формы"},className:{required:!1,tsType:{name:"string"},description:"Дополнительный класс"},form:{required:!1,tsType:{name:"FormInstance"},description:"Инстанс формы, управляемый через хук useForm"},initialValues:{required:!1,tsType:{name:"Record",elements:[{name:"string"},{name:"any"}],raw:"Record<string, any>"},description:"Дефолтное значение формы"},onFailure:{required:!1,tsType:{name:"signature",type:"function",raw:"(values: Record<string, ValidateError[]>) => void",signature:{arguments:[{type:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"ValidateError"}],raw:"ValidateError[]"}],raw:"Record<string, ValidateError[]>"},name:"values"}],return:{name:"void"}}},description:"Метод не успешной отправки формы"},onFinish:{required:!1,tsType:{name:"signature",type:"function",raw:"(values: Record<string, any>) => void",signature:{arguments:[{type:{name:"Record",elements:[{name:"string"},{name:"any"}],raw:"Record<string, any>"},name:"values"}],return:{name:"void"}}},description:"Метод успешной отправки формы"}}};const FormItem=({children,className,componentProps,getValueFromEvent=(...args)=>args[0]?.target?.value,name,placeholder,required=!0,rules=[],style,valuePropName="value"})=>{const form=(()=>{const ctx=(0,react.useContext)(FormContext);if(!ctx)throw new Error("useFormContext должен использоваться внутри <Form>");return ctx})(),value=form.getFieldValue(name),errorMessage=form.getFieldError(name).map((e=>e.message)).join("; "),childNode=react.isValidElement(children)?react.cloneElement(children,{...componentProps,errorMessage,onChange:(...args)=>{const val=getValueFromEvent(...args);form.setFieldValue(name,val)},placeholder,required,validationState:errorMessage.length?"invalid":"valid",[valuePropName]:value}):children;return(0,react.useEffect)((()=>(form.registerField({name,rules,value:form.getFieldValue(name)}),()=>{form.unregisterField(name)})),[name,rules]),react.createElement("div",{className,style},childNode)};FormItem.__docgenInfo={description:"",methods:[],displayName:"FormItem",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Компонент формы (Checkbox, TextField и т.д.)"},className:{required:!1,tsType:{name:"string"},description:"Дополнительный класс"},componentProps:{required:!1,tsType:{name:"Record",elements:[{name:"string"},{name:"any"}],raw:"Record<string, any>"},description:"Пропсы передаваемого компонента"},getValueFromEvent:{required:!1,tsType:{name:"signature",type:"function",raw:"(...args: any[]) => any",signature:{arguments:[{type:{name:"Array",elements:[{name:"any"}],raw:"any[]"},name:"args",rest:!0}],return:{name:"any"}}},description:"Метод получения значения из компонента. Пример: const getValue = (v) => v.value",defaultValue:{value:"(...args) => args[0]?.target?.value",computed:!1}},name:{required:!0,tsType:{name:"string"},description:"Название поля формы"},placeholder:{required:!1,tsType:{name:"string"},description:"Подпись поля"},required:{required:!1,tsType:{name:"boolean"},description:"Флаг обязательности поля",defaultValue:{value:"true",computed:!1}},rules:{required:!1,tsType:{name:"Array",elements:[{name:"Rule"}],raw:"Rule[]"},description:"Список правил валидации",defaultValue:{value:"[]",computed:!1}},style:{required:!1,tsType:{name:"ReactCSSProperties",raw:"React.CSSProperties"},description:"Стили"},valuePropName:{required:!1,tsType:{name:"string"},description:"Название значения поля. Например, для чекбокса - checked, а для инпута - value",defaultValue:{value:'"value"',computed:!1}}}};const FormField=({className,component:Component,componentProps={},name,placeholder,required=!1,rules=[],style,...rest})=>{const componentName=(Component=>"string"==typeof Component?Component:Component.displayName||Component.name||"Unknown")(Component),config=componentMap[componentName]||{},allRules=(({required=!1,rules=[]})=>(0,react.useMemo)((()=>required?rules.some((r=>r.required))?rules:[{message:"Обязательное поле",required:!0},...rules]:rules),[required,JSON.stringify(rules)]))({required,rules});return react.createElement(FormItem,{className,getValueFromEvent:config.getValueFromEvent,name,placeholder,required,rules:allRules,style,valuePropName:config.valuePropName||"value",...rest},react.createElement(Component,componentProps))};FormField.__docgenInfo={description:"",methods:[],displayName:"FormField",props:{className:{required:!1,tsType:{name:"string"},description:"Дополнительный класс"},component:{required:!0,tsType:{name:"ReactElementType",raw:"React.ElementType"},description:"Компонент формы (Checkbox, TextField и т.д.)"},componentProps:{required:!1,tsType:{name:"Record",elements:[{name:"string"},{name:"any"}],raw:"Record<string, any>"},description:"Пропсы передаваемого компонента",defaultValue:{value:"{}",computed:!1}},name:{required:!0,tsType:{name:"string"},description:"Название поля формы"},placeholder:{required:!1,tsType:{name:"string"},description:"Подпись поля"},required:{required:!1,tsType:{name:"boolean"},description:"Флаг обязательности поля",defaultValue:{value:"false",computed:!1}},rules:{required:!1,tsType:{name:"Array",elements:[{name:"Rule"}],raw:"Rule[]"},description:"Список правил валидации",defaultValue:{value:"[]",computed:!1}},style:{required:!1,tsType:{name:"ReactCSSProperties",raw:"React.CSSProperties"},description:"Стили"}}};const Form_stories={component:Form,parameters:{docs:{description:{component:"### Компоненты для построения форм\n- **Form** — оборачивает форму, управляет состоянием и валидацией\n- **FormItem** — вручную используется для отображения поля, прокидывает value, onChange, ошибки\n- **FormField** — автоматическая обёртка над FormItem + компонентом поля, проставляет valuePropName и getValueFromEvent автоматически\n- **FormContext** — используется внутри, содержит значения, ошибки, методы валидации и регистрации полей\n\nИспользуйте **FormField** для интеграции с UI-китом. **FormItem** применяйте для сторонних компонентов или ручной настройки."}}},subcomponents:{FormField,FormItem},title:"Form/Form"},SmallForm=()=>{const form=useForm();return react.createElement(Flex.s,{gap:12,vertical:!0},react.createElement(Form,{form},react.createElement(Flex.s,{gap:12,vertical:!0},react.createElement(FormField,{component:TextField.A,name:"email",placeholder:"Email",required:!0}),react.createElement(FormField,{component:Checkbox.S,componentProps:{label:"Согласие"},name:"agree",placeholder:"Согласие"}),react.createElement(Button.$,{type:"submit"},"Отправить"))),react.createElement("pre",null,"Значения формы: ",JSON.stringify(form.getFieldsValue(),null,2)),react.createElement("pre",null,"Ошибки формы: ",JSON.stringify(form.getFieldsError(),null,2)))},Small={name:"Маленькая форма",parameters:{docs:{source:{code:'\nconst SmallForm = () => {\n  const form = useForm()\n\n  return (\n    <>\n      <Form form={form}>\n        <FormField\n          component={TextField}\n          name="email"\n          placeholder="Email"\n          required\n        />\n        <FormField\n          component={Checkbox}\n          componentProps={{ label: "Согласие" }}\n          name="agree"\n          placeholder="Согласие"\n        />\n\n        <Button type="submit">Отправить</Button>\n      </Form>\n\n      {\n        <pre>\n          Значения формы: {JSON.stringify(form.getFieldsValue(), null, 2)}\n        </pre>\n      }\n      {\n        <pre>\n          Ошибки формы: {JSON.stringify(form.getFieldsError(), null, 2)}\n        </pre>\n      }\n    </>\n  )\n}'}}},render:()=>react.createElement(SmallForm,null)},MediumForm=()=>{const form=useForm();return react.createElement(Flex.s,{gap:12,vertical:!0},react.createElement(Form,{form},react.createElement(Flex.s,{gap:12,vertical:!0},react.createElement(FormField,{component:TextField.A,name:"fullName",placeholder:"ФИО",rules:[{message:"Введите ФИО",required:!0}]}),react.createElement(FormField,{component:NumberField.o,name:"age",placeholder:"Возраст"}),react.createElement(FormField,{componentProps:{items:[{id:"m",value:"Мужской"},{id:"f",value:"Женский"}]},component:SelectField.z,name:"gender",placeholder:"Пол"}),react.createElement(FormField,{component:DatePicker.l,name:"birthDate",placeholder:"Дата рождения",required:!0}),react.createElement(Button.$,{type:"submit"},"Отправить"))),react.createElement("pre",null,"Значения формы: ",JSON.stringify(form.getFieldsValue(),null,2)),react.createElement("pre",null,"Ошибки формы: ",JSON.stringify(form.getFieldsError(),null,2)))},Medium={name:"Средняя форма",parameters:{docs:{source:{code:'\nconst MediumForm = () => {\n  const form = useForm()\n\n  return (\n    <>\n      <Form form={form}>\n        <FormField\n          component={TextField}\n          name="fullName"\n          placeholder="ФИО"\n          rules={[{ message: "Введите ФИО", required: true }]}\n        />\n        <FormField component={NumberField} name="age" placeholder="Возраст" />\n        <FormField\n          componentProps={{\n            items: [\n              { id: "m", value: "Мужской" },\n              { id: "f", value: "Женский" },\n            ],\n          }}\n          component={SelectField}\n          name="gender"\n          placeholder="Пол"\n        />\n        <FormField\n          component={DatePicker}\n          name="birthDate"\n          placeholder="Дата рождения"\n          required\n        />\n\n        <Button type="submit">Отправить</Button>\n      </Form>\n\n      {\n        <pre>\n          Значения формы: {JSON.stringify(form.getFieldsValue(), null, 2)}\n        </pre>\n      }\n      {\n        <pre>\n          Ошибки формы: {JSON.stringify(form.getFieldsError(), null, 2)}\n        </pre>\n      }\n    </>\n  )\n}'}}},render:()=>react.createElement(MediumForm,null)},LargeForm=()=>{const form=useForm();return react.createElement(Flex.s,{gap:12,vertical:!0},react.createElement(Form,{onFailure:errors=>{console.log("Submit error form",errors)},onFinish:values=>{console.log("Submit form",values)},form,initialValues:{agree:!0}},react.createElement(Flex.s,{gap:12,vertical:!0},react.createElement(FormField,{component:TextField.A,name:"name",placeholder:"Имя"}),react.createElement(FormField,{component:TextField.A,name:"surname",placeholder:"Фамилия"}),react.createElement(FormField,{component:TextField.A,name:"phone",placeholder:"Телефон"}),react.createElement(FormField,{component:TextField.A,name:"email",placeholder:"Email"}),react.createElement(FormField,{rules:[{validator:v=>10!==v?.length&&{message:"Введите правильное значение паспорта (10 символов)"}}],component:TextField.A,name:"passport",placeholder:"Паспорт"}),react.createElement(FormField,{component:TextField.A,name:"issuedBy",placeholder:"Кем выдан"}),react.createElement(FormField,{component:TextField.A,name:"inn",placeholder:"ИНН"}),react.createElement(FormField,{component:TextField.A,name:"snils",placeholder:"СНИЛС"}),react.createElement(FormField,{component:TextField.A,name:"address",placeholder:"Адрес"}),react.createElement(FormField,{component:Checkbox.S,componentProps:{label:"Согласие"},name:"largeAgree",placeholder:"Согласие"}),react.createElement(Button.$,{type:"submit"},"Отправить"))),react.createElement("pre",null,"Значения формы: ",JSON.stringify(form.getFieldsValue(),null,2)),react.createElement("pre",null,"Ошибки формы: ",JSON.stringify(form.getFieldsError(),null,2)))},Large={name:"Большая форма",parameters:{docs:{source:{code:'\nconst LargeForm = () => {\n  const form = useForm()\n\n  return (\n    <>\n      <Form form={form} initialValues={{ agree: true }}>\n        <FormField component={TextField} name="name" placeholder="Имя" />\n        <FormField component={TextField} name="surname" placeholder="Фамилия" />\n        <FormField component={TextField} name="phone" placeholder="Телефон" />\n        <FormField component={TextField} name="email" placeholder="Email" />\n        <FormField\n          rules={[\n            {\n              validator: (v) =>\n                v?.length !== 10 && {\n                  message: "Введите правильное значение паспорта (10 символов)",\n                },\n            },\n          ]}\n          component={TextField}\n          name="passport"\n          placeholder="Паспорт"\n        />\n        <FormField\n          component={TextField}\n          name="issuedBy"\n          placeholder="Кем выдан"\n        />\n        <FormField component={TextField} name="inn" placeholder="ИНН" />\n        <FormField component={TextField} name="snils" placeholder="СНИЛС" />\n        <FormField component={TextField} name="address" placeholder="Адрес" />\n        <FormField\n          component={Checkbox}\n          componentProps={{ label: "Согласие" }}\n          name="agree"\n          placeholder="Согласие"\n        />\n\n        <Button type="submit">Отправить</Button>\n      </Form>\n\n      {\n        <pre>\n          Значения формы: {JSON.stringify(form.getFieldsValue(), null, 2)}\n        </pre>\n      }\n      {\n        <pre>\n          Ошибки формы: {JSON.stringify(form.getFieldsError(), null, 2)}\n        </pre>\n      }\n    </>\n  )\n}'}}},render:()=>react.createElement(LargeForm,null)},__namedExportsOrder=["Small","Medium","Large"];Small.parameters={...Small.parameters,docs:{...Small.parameters?.docs,source:{originalSource:'{\n  name: "Маленькая форма",\n  parameters: {\n    docs: {\n      source: {\n        code: `\nconst SmallForm = () => {\n  const form = useForm()\n\n  return (\n    <>\n      <Form form={form}>\n        <FormField\n          component={TextField}\n          name="email"\n          placeholder="Email"\n          required\n        />\n        <FormField\n          component={Checkbox}\n          componentProps={{ label: "Согласие" }}\n          name="agree"\n          placeholder="Согласие"\n        />\n\n        <Button type="submit">Отправить</Button>\n      </Form>\n\n      {\n        <pre>\n          Значения формы: {JSON.stringify(form.getFieldsValue(), null, 2)}\n        </pre>\n      }\n      {\n        <pre>\n          Ошибки формы: {JSON.stringify(form.getFieldsError(), null, 2)}\n        </pre>\n      }\n    </>\n  )\n}`\n      }\n    }\n  },\n  render: () => <SmallForm />\n}',...Small.parameters?.docs?.source}}},Medium.parameters={...Medium.parameters,docs:{...Medium.parameters?.docs,source:{originalSource:'{\n  name: "Средняя форма",\n  parameters: {\n    docs: {\n      source: {\n        code: `\nconst MediumForm = () => {\n  const form = useForm()\n\n  return (\n    <>\n      <Form form={form}>\n        <FormField\n          component={TextField}\n          name="fullName"\n          placeholder="ФИО"\n          rules={[{ message: "Введите ФИО", required: true }]}\n        />\n        <FormField component={NumberField} name="age" placeholder="Возраст" />\n        <FormField\n          componentProps={{\n            items: [\n              { id: "m", value: "Мужской" },\n              { id: "f", value: "Женский" },\n            ],\n          }}\n          component={SelectField}\n          name="gender"\n          placeholder="Пол"\n        />\n        <FormField\n          component={DatePicker}\n          name="birthDate"\n          placeholder="Дата рождения"\n          required\n        />\n\n        <Button type="submit">Отправить</Button>\n      </Form>\n\n      {\n        <pre>\n          Значения формы: {JSON.stringify(form.getFieldsValue(), null, 2)}\n        </pre>\n      }\n      {\n        <pre>\n          Ошибки формы: {JSON.stringify(form.getFieldsError(), null, 2)}\n        </pre>\n      }\n    </>\n  )\n}`\n      }\n    }\n  },\n  render: () => <MediumForm />\n}',...Medium.parameters?.docs?.source}}},Large.parameters={...Large.parameters,docs:{...Large.parameters?.docs,source:{originalSource:'{\n  name: "Большая форма",\n  parameters: {\n    docs: {\n      source: {\n        code: `\nconst LargeForm = () => {\n  const form = useForm()\n\n  return (\n    <>\n      <Form form={form} initialValues={{ agree: true }}>\n        <FormField component={TextField} name="name" placeholder="Имя" />\n        <FormField component={TextField} name="surname" placeholder="Фамилия" />\n        <FormField component={TextField} name="phone" placeholder="Телефон" />\n        <FormField component={TextField} name="email" placeholder="Email" />\n        <FormField\n          rules={[\n            {\n              validator: (v) =>\n                v?.length !== 10 && {\n                  message: "Введите правильное значение паспорта (10 символов)",\n                },\n            },\n          ]}\n          component={TextField}\n          name="passport"\n          placeholder="Паспорт"\n        />\n        <FormField\n          component={TextField}\n          name="issuedBy"\n          placeholder="Кем выдан"\n        />\n        <FormField component={TextField} name="inn" placeholder="ИНН" />\n        <FormField component={TextField} name="snils" placeholder="СНИЛС" />\n        <FormField component={TextField} name="address" placeholder="Адрес" />\n        <FormField\n          component={Checkbox}\n          componentProps={{ label: "Согласие" }}\n          name="agree"\n          placeholder="Согласие"\n        />\n\n        <Button type="submit">Отправить</Button>\n      </Form>\n\n      {\n        <pre>\n          Значения формы: {JSON.stringify(form.getFieldsValue(), null, 2)}\n        </pre>\n      }\n      {\n        <pre>\n          Ошибки формы: {JSON.stringify(form.getFieldsError(), null, 2)}\n        </pre>\n      }\n    </>\n  )\n}`\n      }\n    }\n  },\n  render: () => <LargeForm />\n}',...Large.parameters?.docs?.source}}}}}]);